boost

Conceptually, then, a node can be thought of as the following structure:

struct ptree
{
   data_type data;                         // data associated with the node
   list< pair<key_type, ptree> > children; // ordered list of named children
};

typedef basic_ptree<std:: string, std::string> ptree;

boost::ptree 表示json时，会丢失值的类型信息，所有值都是string
get方法有抛异常版和默认值版
put方法如果值不能转换为string则会抛异常，如果路径不存在则自动创建

ptree get_child(path) //get child node at the given path 
get_value() //get the value of this node
get(path) // shorthand for get_child(path).get_value()

data() //reference to the actual data in this node, type is string

 //Erase all direct children with the given key and return the count.
 //不会抛异常，即使key不存在时
erase(key_type key)

//对ptree迭代时会依次访问直接子节点(遍历深度为1)
//访问顺序是子节点的插入顺序，不是按子节点的key排序
for (pt::ptree::value_type v : ptree_node) {
    //value_type pair类型
    //typedef std::pair<const key, ptree> value_type
}

解析JSON
read_json()  //如果解析的过程出错会抛异常json_parser_error
write_json() //如果property tree不能用json表示会抛异常json_parser_error


C++11 变量初始化

brace initialization, sometimes called uniform initialization

int width{ 5 } //direct brance initialization
int width{} //zero initialization, generally initializes the variable to zero (or empty)
int width{ 4.5 } //error: brance initialization disallow narrowing conversion

数组初始化
int foo[]{ 10, 20, 30 } //创建一个长度为3的数组，并初始化
std::vector<int> vec{ 7, 8, 9}

字符数组初始化
char a_string[]{ "hello" } //a_string is an array of length 6, with a null terminator
const char *p_string{ "hello" } //p_string is a pointer

in-class member initialize(non-static member initialization)
class Rectangle {
    double _length{ 1. 0};
    double _width{ 1. 0};
}
