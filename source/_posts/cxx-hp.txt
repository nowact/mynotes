0. 先定位
   valgrind等性能检查工具
   perf 
   linux /proc/<pid> 目录下的统计数据

1. 选择正确的数据结构和算法
   避免STL扩容时的内存移动、复制

2. 减少内存拷贝
   C++11 std::vector emplace
   io分散读、集中写

3. 分支预测 ___builtin_expect(exp, c)
   减少CPU Cache失效
      多使用局部变量，少使用全局变量
      二维数组先取行再取列
      线程绑定CPU
      数据定义和cache line对齐(64字节)
      线程之间避免访问相邻的数据, 例如a[8], 然后每个线程访问固定一个下标来访问, 并且存在写操作, 这样会使效率暴降, 除非把a的数据类型是按CPU的cacheline大小定义的.


4. 线程的使用
   多线程并发充分利用多核资源
   避免过多加锁，防止拖累并发
   避免线程过多，减少线程调度开销
   线程绑定cpu core

5. 网络数据收发性能
   独立的网络IO线程
   分散读，集中写
   调整tcp相关内核参数
   tcpdump排查与验证问题

4. 无符号信息分析coredump文件

5. S卡、FPEG

