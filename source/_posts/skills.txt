克隆远程分支
git checkout -b test <name of remote>/test

git checout <tagname> //签出tag
显示tag的commit id
git show <tagname>

git commit --amend //向最近的commit追加提交内容

git diff --staged //查看stage中的修改

git checkout <path/filename> //丢弃某个文件的修改

git add <path> //添加文件到index
git reset <path> // is the opposite of git add <path>。

git rm --cache <path> //rm file from index, 可以用于解除git对文件的控制

git push <origin> --delete <branch_name> // 删除远程分支
git push --set-upstream <origin> <branch_name> // 推送在本地创建的分支到远程

git log -p [commit-id] //显示文件变化内容
git log --stat //显示变化文件列表
git log --all --decorate --oneline --graph


git config --global log.decorate auto # 修改全局配置
git config --global alias.logg "log --all --decorate --oneline --graph" # 定义命令别名

git submodule update # 更新submodule到其指定的commit
cd submodule_dir && git pull origin master # 更新submodule到远程最新

//合并最近3个commit
1. 
git rebase -i HEAD~3
2. 编辑弹出的命令
pick commit1
squash commit2
squash commit3
3. 编辑合并后的提交message



GDB
info symbol <函数名> //查看函数所在的可执行文件/动态库 
info sharedlibrary   //显示被加载的动态库列表
thread <线程id>      //切换到线程<id>
thread              //显示当前线程的id
set print object on //print object's derived type based on vtable info
set args <参数列表>  //设置被调试进程的启动参数。比如 set args -n 10
gdb --args program arg1 arg2 ... //在命令行里指定被调试程序的启动参数
show args           //显示被调试进程的启动参数

#打印所有线程的堆栈信息到bt_output.txt
gdb /home/archforce/ATP/bin/agw core.7906 -ex 'thread apply all bt' -ex quit |& tee bt_output.txt
gdb ./jingle_main 27499 -ex 'thread apply all bt' -ex quit |& tee bt_output.txt

#运行时打印所有异常抛出时的堆栈
set pagination off
catch throw
commands
backtrace
continue
end
run/continue

#打印输出到文件
set logging file gdb_output.txt
set logging on
show logging

Linux
查看正在运行的进程加载的动态库列表
cat /proc/<pid>/maps

#查看程序的RUNPATH
readelf -d clangd | head -20


查看ELF文件的符号定义的几种方法
objdump -T libz.so
//-T Print the dynamic symbol table entries of the file.
//-C Demangle C++ symbols

nm -gD libz.so
//-g --extern-only Display only external symbols
//-D --dynamic Display the dynamic symbols rather than the normal symbols
//-C Demangle C++ symbols

readelf -Ws libz.so
//-s --symbols Displays the entries in symbol table section
//-W --wide Don't break output lines to fit info 80 columns

解析c++的类名
c++filt <符号名> //Demangle C++ and Java symbols

top -H -p <pid> 查看进程中的线程列表
gstack/pstack <LWP thread id> //打印线程的堆栈 
strace //system call trace
ltrace //library call trace


tcpdump -i lo -n -X -vvv 'tcp port 12346 and (tcp[tcpflags] & (tcp-syn|tcp-fin) != 0)'


vim

make distclean  # if you build Vim before

./configure --prefix=/home/wangzhiguang/devtools/vimhome

./configure --with-features=huge \
            --enable-multibyte \
            --enable-python3interp=yes \
            --with-python3-config-dir=$(python3-config --configdir) \
            --enable-cscope \
            --prefix=/home/wangzhiguang/devtools/vimhome

./configure --with-features=huge \
            --enable-multibyte \
            --enable-pythoninterp=yes \
            --with-python-config-dir=/lib64/python2.7/config \
            --enable-cscope \
            --prefix=/home/wangzhiguang/devtools/vimhome

--with-python-config-dir=/lib64/python2.7/config

make
sudo make install

~/.vim/vimrc
set number
set hlsearch
set expandtab
set tabstop=4
set shiftwidth=4
set autoindent

set cursorline

创建tags文件
ctags -R include/ src/

生成clangd需要的compile_commands.json
cd myproject/build
cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ..
ln -s myproject/build/compile_commands.json ~/myproject/


//查询安装包安装的文件
repoquery -l <package-name>

# build boost
sudo apt install pkgconf
sudo apt install libicu-dev

./bootstrap.sh --prefix=/home/username/usr/local --with-libraries=filesystem,regex,program_options,test
./b2
./b2 install

Ubuntu
dpkg-query -L <package-name> # 查看已安装的包的文件列表
apt-file list <package-name> # 查看未安装的包的文件列表
dpkg -l <package-name> # 显示package是否被安装
dpkg -S <filename> 搜索包含文件<filename>的软件包

修改coredump文件名
vim /etc/sysctl.conf
kernel.core_pattern = %e-%p.core
sysctl -p

# linux-perf
Build
下载内核版本对应的源码
https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/snapshot/linux-4.4.tar.gz
cd linux-4.4/tools/perf
LDFLAGS=-static make
查看make的依赖库检查输出，安装缺少的依赖库，否则即使编译通过，功能也不完善

sudo apt-get install elfutils libelf-dev libdw-dev libaudit-dev liblzma-dev

测量程序热点
gcc -g3 main.cpp # perf annotate 需要-g3的调试信息
perf record ./a.out
perf annotate

统计并显示主要性能计数器: 分支预测
perf stat ./a.out

查看cache miss
perf stat -B -e cache-references,cache-misses

sudo perf report -g --no-children 


# lcov
mkdir lcov_output
lcov --directory build -capture --output-file lcov_output/app.info --rc lcov_branch_coverage=1
cd lcov_output && genhtml --branch-coverage app.info --rc lcov_branch_coverage=1

# gcovr
cd ~/projects/ATS-dev/build
make && ./a.out
mkdir gcovr
gcovr -r ~/projects/ATS-dev/ --html --html-details --exclude-unreachable-branches --exclude-throw-branches -o gcovr/coverage.html .


## python conda
# 安装指定渠道的包
conda install -c conda-forge scikit-plot


# 磁盘写入测速
# tmp.data 为6G
dd if=/dev/zero of=tmp.data oflag=direct bs=64k count=100K


